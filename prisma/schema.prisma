generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum PhoneNumberType {
  MOBILE
  CELL
  HOME
  WORK
}

enum ContactMergeStatus {
  MERGED_BETWEEN
  MULTIPLE_CHOICE
  PENDING
  SINGLE_CHOICE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id             String              @id @default(cuid())
  name           String?
  email          String?             @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  googleAccounts UserGoogleAccount[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  Contact        Contact[]
  events         Event[]
  homeBases      HomeBase[]

  @@map("user")
}

model HomeBase {
  id        String    @id @default(cuid())
  location  String
  coords    String    // Assuming coords are stored as a string (e.g., "latitude,longitude")
  timezone  String    // Store timezone identifier (e.g., "America/New_York")
  active    Boolean

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("home_base")
}

model Event {
  id            String       @id @default(cuid())
  userId        String
  googleEventId String?
  start         DateTime
  end           DateTime
  timezone      String
  recurrence    String       @default("unique")
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  eventDetails  EventDetail?

  @@map("event")
}

model EventDetail {
  id             String   @id @default(cuid())
  eventId        String   @unique
  requesterName  String
  requesterEmail String
  guests         String[]
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_detail")
}

model GoogleAccount {
  id            String              @id @default(cuid())
  googleId      String              @unique
  email         String?             @unique
  accessToken   String?
  refreshToken  String?
  users         UserGoogleAccount[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  token         String?
  calendarToken String?
  contacts      Contact[]
  ableToWrite   Boolean             @default(false)

  @@map("google_account")
}

model UserGoogleAccount {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleAccountId String
  googleAccount   GoogleAccount @relation(fields: [googleAccountId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([userId, googleAccountId])
  @@map("user_google_account")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Contact {
  id              Int                   @id @default(autoincrement())
  userId          String
  googleAccountId String?
  googleAccount   GoogleAccount?        @relation(fields: [googleAccountId], references: [id])
  user            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String                @db.VarChar()
  nickName        String?               @db.VarChar()
  birthday        String?               @db.VarChar()
  organizations   ContactOrganization[]
  phoneNumbers    ContactPhoneNumber[]
  occupations     ContactOccupation[]
  photos          ContactPhoto[]
  addresses       ContactAddress[]
  emails          ContactEmail[]
  googleContacts  ContactGoogle[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  firstContacts   ContactStatus[]       @relation("firstContact")
  secondContacts  ContactStatus[]       @relation("secondContact")
  finalContacts   ContactStatus[]       @relation("finalContact")

  @@map("contacts")
}

model ContactStatus {
  id              Int                @id @default(autoincrement())
  firstContactId  Int
  secondContactId Int
  finalContactId  Int?
  firstContact    Contact            @relation("firstContact", fields: [firstContactId], references: [id], onDelete: Cascade)
  secondContact   Contact            @relation("secondContact", fields: [secondContactId], references: [id], onDelete: Cascade)
  finalContact    Contact?           @relation("finalContact", fields: [finalContactId], references: [id], onDelete: Cascade)
  mergeStatus     ContactMergeStatus @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([firstContactId, secondContactId], name: "unique_contact_pair_status")
  @@map("contact_status")
}

model ContactGoogle {
  id              Int      @id @default(autoincrement())
  googleContactId String   @db.VarChar()
  contactId       Int
  contact         Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("contact_google")
}

model Organization {
  id        Int                   @id @default(autoincrement())
  name      String                @db.VarChar()
  contacts  ContactOrganization[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@map("organizations")
}

model PhoneNumber {
  id        Int                  @id @default(autoincrement())
  number    String               @db.VarChar()
  type      PhoneNumberType
  contacts  ContactPhoneNumber[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("phone_numbers")
}

model Occupation {
  id        Int                 @id @default(autoincrement())
  name      String              @db.VarChar()
  contacts  ContactOccupation[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("occupations")
}

model Photo {
  id        Int            @id @default(autoincrement())
  url       String         @db.VarChar()
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  contacts  ContactPhoto[]

  @@map("photos")
}

model Address {
  id            Int              @id @default(autoincrement())
  countryCode   String?          @db.VarChar()
  city          String?          @db.VarChar()
  region        String?          @db.VarChar()
  postalCode    String?          @db.VarChar()
  streetAddress String?          @db.VarChar()
  contacts      ContactAddress[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("addresses")
}

model Email {
  id        Int            @id @default(autoincrement())
  address   String         @db.VarChar()
  contacts  ContactEmail[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@map("emails")
}

model ContactOrganization {
  id             Int          @id @default(autoincrement())
  contactId      Int
  organizationId Int
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([contactId, organizationId], name: "unique_contact_organization")
  @@map("contact_organizations")
}

model ContactPhoneNumber {
  id            Int         @id @default(autoincrement())
  contactId     Int
  phoneNumberId Int
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  phoneNumber   PhoneNumber @relation(fields: [phoneNumberId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([contactId, phoneNumberId], name: "unique_contact_phone_number")
  @@map("contact_phone_numbers")
}

model ContactOccupation {
  id           Int        @id @default(autoincrement())
  contactId    Int
  occupationId Int
  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
  ocuppation   Occupation @relation(fields: [occupationId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([contactId, occupationId], name: "unique_contact_occupation")
  @@map("contact_occupations")
}

model ContactPhoto {
  id        Int      @id @default(autoincrement())
  contactId Int
  photoId   Int
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, photoId], name: "unique_contact_photo")
  @@map("contact_photos")
}

model ContactAddress {
  id        Int      @id @default(autoincrement())
  contactId Int
  addressId Int
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  address   Address  @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, addressId], name: "unique_contact_address")
  @@map("contact_addresses")
}

model ContactEmail {
  id        Int      @id @default(autoincrement())
  contactId Int
  emailId   Int
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  email     Email    @relation(fields: [emailId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, emailId], name: "unique_contact_email")
  @@map("contact_emails")
}
